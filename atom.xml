<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Software Development]]></title>
    <link href="http://www.marcossegovia.com/atom.xml" rel="self"/>
    <link href="http://www.marcossegovia.com/"/>
    <updated>2015-09-13T15:51:06+00:00</updated>
    <id>http://www.marcossegovia.com/</id>
            <author>
            <name><![CDATA[Marcos Segovia]]></name>                    </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Thoughts about this year 2014-2015]]></title>
            <link href="http://www.marcossegovia.com/blog/2015/08/29/thoughts-about-this-year"/>
            <updated>2015-08-29T00:00:00+00:00</updated>
            <id>http://www.marcossegovia.com/blog/2015/08/29/thoughts-about-this-year</id>
            <content type="html"><![CDATA[<p>In the next days It will be a year since I got into my first job as a software developer inside a team of several different members.
Also, I had to manage to keep on with my degree in order not to lose my focus.
But this year, lot of things came up and I'll say worth of them I could deal with.</p>

<h3 id="a-step-forward-to-a-professional-environment">A step forward to a professional environment</h3>

<p>My first job as a PHP developer gave me the vision about the trade-offs during work time and the ecosystem about what a development team tend to look like.
Code were not as well-structured and organized as a junior developer can imagine after reading a little bit of Clean code, DRY principles and Refactoring.
Reality is quite more complex and not all organizations have an adequate team of high-level devs applying the latest and cleanest optimizations to the code in every iteration. Legacy code is inherit in life-long projects, moreover when code lacks of refactoring and things start coupling.
Being pushed to make decisions is the antidote to the fear and failing is the way to be a step closer to success.</p>

<h3 id="practice-to-mastery">Practice to mastery</h3>

<p>As this year went by, I've started to get things done on my own. Exploring new languages, finding out new tools, getting into new frameworks, crafting pet code, start testing before code, learning patterns in order to apply them ...
With all this I realize nobody is going to teach you how to feel comfortable when applying the new tool/feature/pattern, you'll have to embrace it by thinking twice when applying, by failing when using it and by seeing how does it successfully works when well applied.
There is only one rule, know what you want to learn and start slightly.</p>

<h3 id="letting-myself-go">Letting myself go</h3>

<p>This year was my first time as an attendee in the <a href="http://day.phpconference.es/">PHPDay</a> (31st January) organized by the <a href="https://twitter.com/phpbarcelona">PHPBarcelona Group</a></p>

<blockquote class="twitter-tweet" lang="en"><p lang="und" dir="ltr"><a href="https://twitter.com/MrCavero">@MrCavero</a> <a href="https://twitter.com/Ricky_2384">@Ricky_2384</a> <a href="https://twitter.com/hashtag/elePHPantsarecoming?src=hash">#elePHPantsarecoming</a> <a href="http://t.co/TascJAvcbf">pic.twitter.com/TascJAvcbf</a></p>&mdash; Marcos Segovia (@marcossegov) <a href="https://twitter.com/marcossegov/status/561614423069319168">January 31, 2015</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>The experience was great: enthusiastic people spreading ideas around, humble opinions everywhere and speakers sharing their experience with the audience. All together with a fantastic snack prepared by a fantastic staff.
Cannot wait for the next one! Oh, and got the ticket for the <a href="http://2015.phpconference.es/">PHP Barcelona Conference !</a> =D</p>

<p>As start getting into the community, lot of people surprised me. Among all of them, with a few I could start building a relationship and I really could feel how good is to be part of a community of people who love what they do.</p>

<p>With this I wanted to show gratitude for the patience and love to Nil (<a href="https://twitter.com/niluspc">@niluspc</a>) and Nicolò (<a href="https://twitter.com/nicolopigna">@nicolopigna</a>)(people around =P), David (<a href="https://twitter.com/david_vernet">@david_vernet</a>), Andrés (<a href="https://twitter.com/MrCavero">@MrCavero</a>) and Ricard (<a href="https://twitter.com/Ricky_2384">@Ricky_2384</a>) (LaSalle), Marta, David (<a href="https://twitter.com/DeivitOrtiz">@DeivitOrtiz</a>), Álvaro (<a href="https://twitter.com/Alvarosicilia">@Alvarosicilia</a>) and Gonçal (<a href="https://twitter.com/GonsCosta">@GonsCosta</a>) (SDR Department). I've learnt a lot from all of you.</p>

<h3 id="looking-for-the-path">Looking for the path</h3>

<p>With the amount of new technologies coming up everyday it is difficult not to lose focus. Though It is quite more important not to marry with a concrete technology.
We must not forget that tools are a mean to develop something. There are not perfect tools, if they were everybody will code the same way.
The tools and technologies we use are fine until something makes our path easier. If we gain time/money using something new maybe it is time to swap tools.
Same thing happens with infrastructures and methodologies applied to teams and business domains. There are not magic recipes about how to build your perfect team or how to develop a perfect business infrastructure.
Know your company, know you values and get what suits you the best. Apply good practices, but apply within your context.</p>

<p>I'm sure I'm missing many things but I just want to sum up this by expecting a lot of fun in the Master about Web Software Development I'm starting on October and wishing next year will be at least as useful as this.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Dependency Inversion Principle (DIP) and the Abstract Factory Pattern]]></title>
            <link href="http://www.marcossegovia.com/blog/2015/04/22/dependency-inversion-principle"/>
            <updated>2015-04-22T00:00:00+00:00</updated>
            <id>http://www.marcossegovia.com/blog/2015/04/22/dependency-inversion-principle</id>
            <content type="html"><![CDATA[<p><strong>DIP</strong> or <strong>Dependency Inversion Principle</strong> stands as one of the most important mechanism of OOP.</p>

<p>The principle says that <em>'only concrete classes or functions should depend from interfaces or abstract classes'</em>.
In the same way, it is like telling every dependency should run upon interfaces or abstract classes.
No matter what, we're not allowed to depend from concrete classes as they are much more likely to change.</p>

<p>But, what about the fact on instantiating objects within our applications? We're automatically made to depend on a concrete class.
Because of that there is a pattern called <strong>Abstract Factory</strong> which allows us to depend only in one concrete class, the factory.
The factory class will provide with the object we want it to make, without worrying about how it deals with.</p>

<p>We'll keep an eye on this with an example:</p>

<pre><code class="php">interface FruitFactoryInterface
{
    public function getApple();
    public function getPear();
    public function getOrange();
    public function getBanana();
}

class FruitFactory implements FruitFactoryInterface
{
    public function getApple()
    {
        return  new Apple();
    }

    public function getPear()
    {
        return new Pear();
    }

    public function getOrange()
    {
        return new Orange();
    }

    public function getBanana()
    {
        return new Banana();
    }
}

abstract class Fruit
{
    protected $color;
    protected $flavour;

    protected function __construct($color, $flavour)
    {
        $this-&gt;color = $color;
        $this-&gt;flavour = $flavour;
    }

    abstract protected function iTasteLike();

}

class Apple extends Fruit
{
    public function __construct()
    {
        parent::__construct('red', 'tasty');
    }

    public function iTasteLike()
    {
        echo 'I am '.$this-&gt;color.' color and I taste '.$this-&gt;flavour;
    }
}

class Pear extends Fruit
{
    public function __construct()
    {
        parent::__construct('green', 'awkward');
    }

    public function iTasteLike()
    {
        echo 'I am '.$this-&gt;color.' color and I taste '.$this-&gt;flavour;
    }
}

class Orange extends Fruit
{
    public function __construct()
    {
        parent::__construct('orange', 'sour');
    }

    public function iTasteLike()
    {
        echo 'I am '.$this-&gt;color.' color and I taste '.$this-&gt;flavour;
    }
}

class Banana extends Fruit
{
    public function __construct()
    {
        parent::__construct('yellow', 'overly sweet');
    }

    public function iTasteLike()
    {
        echo 'I am '.$this-&gt;color.' color and I taste '.$this-&gt;flavour;
    }
}
</code></pre>

<p>With so, we instantiate our Factory and we just call whatever object we want to obtain, letting the Factory deal with the instantiation.</p>

<pre><code class="php">$fruitFactory = new FruitFactory();

$apple = $fruitFactory-&gt;getApple();
$pear = $fruitFactory-&gt;getPear();
$orange = $fruitFactory-&gt;getOrange();
$banana = $fruitFactory-&gt;getBanana();

$apple-&gt;iTasteLike();
echo '&lt;/br&gt;';
$pear-&gt;iTasteLike();
echo '&lt;/br&gt;';
$orange-&gt;iTasteLike();
echo '&lt;/br&gt;';
$banana-&gt;iTasteLike();
</code></pre>

<p>And of course, our output will be something like this:</p>

<p><img class="img-thumbnail" src="http://www.marcossegovia.com/assets/images/2015-04-22/output.png" alt="output Abstract Factory" /></p>

<p><strong>Bibliography:</strong></p>

<p><a href="https://sourcemaking.com/design_patterns/abstract_factory">https://sourcemaking.com/design_patterns/abstract_factory</a></p>

<p><a href="http://www.objectmentor.com/resources/articles/Principles_and_Patterns.pdf">http://www.objectmentor.com/resources/articles/Principles_and_Patterns.pdf</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Open Closed Principle (OCP)]]></title>
            <link href="http://www.marcossegovia.com/blog/2015/04/19/open-closed-principle"/>
            <updated>2015-04-19T00:00:00+00:00</updated>
            <id>http://www.marcossegovia.com/blog/2015/04/19/open-closed-principle</id>
            <content type="html"><![CDATA[<p>The <strong>OPC</strong> stands for <strong>Open Closed Principle</strong> and it basically says that either classes, modules or packages are opened for extension but closed for modification.
In other words, you can obtain the functionalities but not modifying those internally. The package turns out immutable.
This principle is high valuated in those area where changes become something common. This principles guarantees to deal with code in order to only add new code instead of changing the legacy one.</p>

<p>An inheritance example built in PHP will show up the idea:</p>

<pre><code class="php">namespace exampleOCP;

abstract class Person
{
    protected $name;
    protected $surname;

    protected function __construct($name, $surname)
    {
        $this-&gt;name = $name;
        $this-&gt;surname = $surname;
    }

    public function breathe()
    {
        echo "I can breathe, I'm a human!";
    }

    abstract  protected function myAction();
}
</code></pre>

<p>We get an abstract class supplying us with a general method every human has: the power of breathing. Moreover it gives us a scheme for an implementing method depending on which kind of subhuman we are.</p>

<p>We declare 2 different people, each will support its capability and will overwrite the abstract method supplied by the parent.</p>

<pre><code class="php">class Programmer extends Person
{
    public function __construct($name, $surname)
    {
        parent::__construct($name, $surname);
    }

    public function myAction()
    {
        echo "I'm ".$this-&gt;name.", my work is to code";
    }
}

class Designer extends Person
{
    public function __construct($name, $surname)
    {
        parent::__construct($name, $surname);
    }

    public  function myAction()
    {
        echo "I'm ".$this-&gt;name.", my work is to design";
    }
}
</code></pre>

<pre><code class="php">$programmer = new Programmer('Marcos', 'Segovia');
$programmer-&gt;breathe();
$programmer-&gt;myAction();
echo "&lt;/br&gt;";
$designer = new Designer('Anna', 'Lovecraft');
$designer-&gt;breathe();
$designer-&gt;myAction();

</code></pre>

<p>The output:</p>

<pre><code>I can breathe, I'm a human!I'm Marcos, my work is to code
I can breathe, I'm a human!I'm Anna, my work is to design
</code></pre>

<p>As we can see, we can extend from an abstract and use its code without modifying any code inside the class.
Though we can overwrite methods we are doing it outside the parent base, OCP is respected.</p>

<p>On designing a good infraestructure It is easy to <strong>add new code without modifying the legacy</strong>.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Introducing RubbikApp]]></title>
            <link href="http://www.marcossegovia.com/blog/2015/01/25/rubikapp"/>
            <updated>2015-01-25T00:00:00+00:00</updated>
            <id>http://www.marcossegovia.com/blog/2015/01/25/rubikapp</id>
            <content type="html"><![CDATA[<p>Don’t you ever happen to meet with friend and everyone being absorved with their mobile phone?</p>

<p>Lately everybody seems to be inmerse in their own screens and we forget about essential things as having fun with with the reality in front of us, just lift your head up and look around.</p>

<p>What about telling you is there a way to stay tuned not only with your smartphone, but with a Smart TV and your connected friends? This is basically RubbikApp.</p>

<p><img class="img-thumbnail" src="http://www.marcossegovia.com/assets/images/2015-01-25/rubikapp_title.jpg" alt="Rubbikapp" /></p>

<p>RubikApp is an adapted game from the classic table game Rummikub but for Smart TVs and Smartphones.</p>

<p>The functionality is really simple. There are 52 pieces in total, 13 green, 13 red, 13 black and 13 blue. Each one has to do with a number from 1 to 13. As game starts 8 pieces are dealt to every player and the first player starts to play.</p>

<p>Talking about multiplaying, the game can be up to 4 players at the same time, players have their respective pieces shown in their phone App during the game run.</p>

<p>The point on the game is to throw all the pieces from your hand into the table before anybody else. To achieve this, during your turn, you have to try to make Straight Flush within your hand and pieces on the table.
The user can send 2 or more pieces, building Straight Flush or adding a single piece to complete Straight Flushes on the table.</p>

<p><img class="img-thumbnail" src="http://www.marcossegovia.com/assets/images/2015-01-25/cards.jpg" alt="Rubbikapp" /></p>

<p>As you can see to operate into the game is really simple in order to master as soon as posible.
But how exactely does it work? Let me show you a little step by step introduction.
First of all you have to start up you Smart TV application and also your mobile app.</p>

<p>Synchronizing screens will display in order to make the connection between smartphone and TV app. As you may realize is all about entering the pincode shown on the TV to your phone App, and so each player who wants to play.</p>

<p><img class="img-thumbnail" src="http://www.marcossegovia.com/assets/images/2015-01-25/preview-start.jpg" alt="Rubbikapp" /></p>

<p>Once all your devices are correctly connected, push your Enter button on your TV controller.
As you can see, each player has their first 8 pieces in their own phones. Meanwhile a table board is shown on the TV with the first piece displayed to be able to start the game.
Each user has 3 different actions during the turn:</p>

<ul>
<li><p><strong>SELECT</strong>: Allows to select the pieces in order to prepare their delivery. If you select the piece, it will be included to the delivery, but if you do not want so, just click it again.</p></li>
<li><p><strong>SEND</strong>: Once you have selected the pieces to send, pushing the send button will analyze whether the pieces are correct choices or not. If it is, pieces will be sent to the table TV reordering the pieces displayed with the ones added. On the other hand, if the you were not able to select that/those pieces and the rest players are still waiting for you to try with another choice.</p></li>
<li><p><strong>END TURN</strong>: In the case the user does not have or just do not see a good chance on selecting cards, you can make your turn end and automaticaly draw a card.</p></li>
</ul>

<p><img class="img-thumbnail" src="http://www.marcossegovia.com/assets/images/2015-01-25/mobile-rubikapp.jpg" alt="Rubbikapp" /></p>

<p>Pieces are reorder automaticaly when players send the ones from their hands. Also you can see how the turn is being displayed as a square bordering the currently player.</p>

<p><img class="img-thumbnail" src="http://www.marcossegovia.com/assets/images/2015-01-25/board-game.jpg" alt="Rubbikapp" /></p>

<p>As mentioned before, the game ends when one of the players has no cards left on his hand. Being automaticaly the winner.</p>

<p>I leave you with the video link below and I encourage you to give it a try !</p>

<p><a href="https://www.youtube.com/watch?v=5Jve8UEIwWc">Video presentation</a></p>

<p>Follow instructions on the Readme:</p>

<p><a href="https://github.com/MarcosSegovia/Samsung-App">Rubbikapp – TV App – Samsung Smart TV</a></p>

<p><a href="https://github.com/MarcosSegovia/SamsungApp_mobile">Rubbikapp – SmartPhone App – Open with Chrome or Safari Browser</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Lean Startup]]></title>
            <link href="http://www.marcossegovia.com/blog/2014/12/10/lean-startup"/>
            <updated>2014-12-10T00:00:00+00:00</updated>
            <id>http://www.marcossegovia.com/blog/2014/12/10/lean-startup</id>
            <content type="html"><![CDATA[<p>It seems entrepreneur lifestyle always comes up with energy as times get worse to find a job. It is not by chance that we’re living an entrepreneur moment for any kind of people and company.</p>

<p>As you try to go deeper, It’s not difficult to find out people thoughts and lots of guidelines about ‘How to make your ideas posible’ or ‘Start building’.</p>

<p>There are lot of facts involved, as It is no longer two people coding from a garage. We are talking about incubators, accelerometers, risk investors, partnership, lot of networking and more.
But to make the long story short, I’ll speak about the last book I’ve got the pleasure to read: <a href="http://www.amazon.es/Lean-Startup-Innovation-Successful-Businesses/dp/B00BW8JFDW/ref=sr_1_3?s=books&amp;ie=UTF8&amp;qid=1428874150&amp;sr=1-3&amp;keywords=lean+startup">The Lean Startup by Eric Ries</a>.</p>

<p>I’ve mention a lot on twitter as I’ve got a sentence that summarize a main concept.
Here are some of them:</p>

<blockquote>
  <ul>
  <li>Without innovation there is not posible growth.</li>
  <li>Build by taking your customers the closest posible.</li>
  <li>Forget about huge plans, build your MVP (Minimum viable product) and fail, then sprint.</li>
  <li>If you don’t know who’s the customer, good quality neither.</li>
  </ul>
</blockquote>

<p>Basically, this post-modern methodology, father of the agile methodologies nowadays, tries to chance our sight about planning and managing projects.
This method makes and effort on collaboration between different departments and the reconciliation with customers. It also recognize the fail as a good thing. And this is a completely change of mind. It is not about failing, it is about being able to stand up as fast as posible and iterate until the product success.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Ajax, dynamic data callback]]></title>
            <link href="http://www.marcossegovia.com/blog/2014/09/29/ajax-calls"/>
            <updated>2014-09-29T00:00:00+00:00</updated>
            <id>http://www.marcossegovia.com/blog/2014/09/29/ajax-calls</id>
            <content type="html"><![CDATA[<p>As a PHP disciple I was really afraid of JS intends to cooperate with data from Server.
I always tried to separate and be clear about the differences in the gap between server-side and client-side. I’ve always seen JS as a nice complement to the well-known dynamic fluency web content rather than content manage around the controller, there is where our new friend comes out: AJAX.</p>

<p>The main goal?
<strong>Manage php content without the need of refreshing our website</strong>.</p>

<p>We do not ask to the server, we just do it locally.
THIS IS NOT A PHP ALTERNATIVE, because there is no way to do that by PHP. We could not ask the server by php if it’s not asking again to the server. REQUEST->RESPONSE you know, server manners.</p>

<p>Here I write for you and example illustrating the usage of Ajax:</p>

<pre><code class="php">/**
* PHP function in our controller called by Ajax using POST
*/

function dataEdit()
{
 //Variable id assigned in the ajax function
 $amazingStuff = $_POST('id');

 //what you want to do during the ajax call
//Sending data back with echo or calling view functions, call to do things in DataBases, etc.
}

</code></pre>

<pre><code class="javascript">/*
** This Script, gets an id from a row and a name from the input of that row
** and updates the name after Ajax called is completed
*/

&lt;script type="text/javascript"  charset="utf-8"&gt;

$(document).ready(function()
{
    $(".edit_button").click(function()
    {
      var ID = $(this).attr('id');
      var name = $("#iname_input_"+ID).val();
    })
    $(".edit_tr").change(function()
    {
        var ID = $(this).attr('id');

        $.ajax({
        type: "POST",
        url: "controller.php",
        data: {id:ID},
        cache: false,
        success: function(html)
        {
            $("#name"+ID).html(name);
        }
        });

    });

    // Edit input box click action
    $(".editbox").mouseup(function()
    {
    return false
    });

    // Outside click action
    $(document).mouseup(function()
    {
    $(".editbox").hide();
    $(".text").show();
    });
});

&lt;/script&gt;
</code></pre>

<pre><code class="html">/*
** We just display the names and add an edit button to be able
** to modify them
** $dataTable is a variable passed to the template and it is an array
** of names
**
*/

&lt;div&gt;
    &lt;table&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;b&gt; Name &lt;/b&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;?php $id=0; ?&gt;
        foreach($dataTable as $dataRow): ?&gt;
        &lt;tr class="edit_tr" id="&lt;?php echo $id; ?&gt;"&gt;

            &lt;td&gt;
                &lt;span id="name_&lt;?php echo $id; ?&gt;" class="text"&gt;&lt;?php echo $dataRow ?&gt;&lt;/span&gt;
                &lt;input type="text" value="&lt;?php echo $dataRow; ?&gt;" class="editbox" id="iname_input_&lt;?php echo $id; ?&gt;"&gt;
            &lt;/td&gt;
            &lt;td&gt;
                &lt;input type="submit" value="Edit" id="&lt;?php echo $id; ?&gt;" class="edit_button"&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;?php $id++; ?&gt;
        &lt;?php endforeach; ?&gt;
    &lt;/table&gt;
&lt;/div&gt;
</code></pre>

<p>And that is how you simply do it.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Hello World !]]></title>
            <link href="http://www.marcossegovia.com/blog/2014/09/20/hello-world"/>
            <updated>2014-09-20T00:00:00+00:00</updated>
            <id>http://www.marcossegovia.com/blog/2014/09/20/hello-world</id>
            <content type="html"><![CDATA[<p>As the first post, I’m glad to present to you my very first personal webpage.</p>

<p>The point in all this blogsite is about exposing my personal training as a programmer due to my adquired knowledge from reading, comparing, speaking with people or just by listening from profesionals on the matters.</p>

<p>But also, I’ll talk about my living experiences as a programmer. From writing down the code, going throught processes of planification, arquitecture and methodology to building up teamwork and controlling timings.
What I’ve found useful or not, what I’m pleased to remark and recommend and, in my humble opinion, what you should practice or not.</p>

<p>From here on we’ve got the perfect place to talk.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[]]></title>
            <link href="http://www.marcossegovia.com/_posts/2015-09-12-solid-principles"/>
            <updated>2015-09-12T00:00:00+00:00</updated>
            <id>http://www.marcossegovia.com/_posts/2015-09-12-solid-principles</id>
            <content type="html"><![CDATA[]]></content>
        </entry>
    </feed>